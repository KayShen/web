/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	$(document).ready(function(event) {
	  var changePage, firstLoad, isAnimating, transitionsSupported;
	  isAnimating = false;
	  firstLoad = false;
	  $('main').on('click', '[data-type="page-transition"]', function(event) {
	    var newPage;
	    event.preventDefault();
	    newPage = $(this).attr('href');
	    if (!isAnimating) {
	      changePage(newPage, true);
	    }
	    return firstLoad = true;
	  });
	  $(window).on('popstate', function() {
	    var newPage, newPageArray;
	    if (firstLoad) {
	      newPageArray = location.pathname.split('/');
	      newPage = newPageArray[newPageArray.length - 1];
	      if (!isAnimating) {
	        changePage(newPage, false);
	      }
	    }
	    return firstLoad = true;
	  });
	  changePage = function(url, bool) {
	    isAnimating = true;
	    $('body').addClass('page-is-changing');
	    $('.cd-loading-bar').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
	      location.href = url;
	      return $('.cd-loading-bar').off('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend');
	    });
	    if (!transitionsSupported()) {
	      return location.href = url;
	    }
	  };
	  return transitionsSupported = function() {
	    return $('html').hasClass('csstransitions');
	  };
	});


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,